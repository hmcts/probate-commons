plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'java-library'
    id 'maven-publish'
    // id 'pmd'
    id 'jacoco'
}


def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: getCurrentGitBranch()

group 'uk.gov.hmcts.reform.probate'
// Do not change this version number
version buildNumber


checkstyle {
    maxWarnings = 0
    toolVersion = '8.5'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/probate-commons"
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'probate-commons'
            version project.version
        }
    }
}

def versions = [
        lombok            : '1.18.28',
        jackson           : '2.15.2',
        apacheCommons     : '3.12.0',
        hibernateValidator: '6.0.13.Final',
        springdoc         : '2.1.0',
        springBoot        : '3.1.1',
        commonsIo         : '2.11.0',
        openfeign         : '3.8.0'
]

dependencies {
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson
    implementation group: 'io.github.openfeign.form', name: 'feign-form', version: versions.openfeign
    annotationProcessor group:'org.projectlombok', name:'lombok', version: versions.lombok

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.apacheCommons
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: versions.hibernateValidator
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: versions.springdoc
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation' , version: versions.springBoot

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation' , version: versions.springBoot
    testImplementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    testImplementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    testImplementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'

    testImplementation('org.mockito:mockito-core:4.8.1')


}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

test {
    maxHeapSize = "1024m"
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
}

jar {
    enabled = true
}

def getCurrentGitBranch() {
    def gitBranch = "DEV-SNAPSHOT"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    return gitBranch
}
